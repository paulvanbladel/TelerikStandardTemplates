@page "/form"

@using TelerikCrud.Shared
@using Telerik.Blazor.Services
@inject ITelerikStringLocalizer Localizer
@* This is the namespace that is generated from the resx files localizer *@
@using TelerikCrud.Shared.Resources
@using Telerik.FontIcons

<h3>User Details</h3>

<TelerikMediaQuery Media="(min-width: 768px)" OnChange="@(mq => IsLargeDevice = mq)"></TelerikMediaQuery>

<TelerikGridLayout ColumnSpacing="2em">
    <GridLayoutColumns>
        @if (IsLargeDevice)
        {
            <GridLayoutColumn Width="8fr" />
            <GridLayoutColumn Width="4fr" />
        }
        else
        {
            <GridLayoutColumn Width="1fr" />
        }
    </GridLayoutColumns>
    <GridLayoutItems>
        <GridLayoutItem>
            <TelerikForm Model="@person" OnValidSubmit="@HandleValidSubmit">
                <FormValidation>
                    <DataAnnotationsValidator />
                </FormValidation>
                <FormItems>
                    <FormAutoGeneratedItems />
                    <FormItem Field="@nameof(Person.Gender)">
                        <Template>
                            <label for="@nameof(Person.Gender)" class="k-label k-form-label">@nameof(Person.Gender)</label>
                            <TelerikDropDownList @bind-Value="@person.Gender" DefaultText="Select gender"
                                                 Data="@genders" TextField="Text" ValueField="Id"
                                                 Id="@nameof(Person.Gender)">
                                <DropDownListSettings>
                                    <DropDownListPopupSettings Height="auto" />
                                </DropDownListSettings>
                            </TelerikDropDownList>
                        </Template>
                    </FormItem>
                    <FormItem Field="@nameof(Person.PreferredTeam)">
                        <Template>
                            <label for="@nameof(Person.PreferredTeam)" class="k-label k-form-label">Preferred Team</label>
                            <TelerikDropDownList @bind-Value="@person.PreferredTeam"
                                                 DefaultText="Preferred team" Id="@nameof(Person.PreferredTeam)"
                                                 Data="@Teams">
                            </TelerikDropDownList>
                        </Template>
                    </FormItem>
                </FormItems>
            </TelerikForm>
        </GridLayoutItem>
        <GridLayoutItem>
            <div>
                <h3>Telerik UI for Blazor Form</h3>
                <p>Telerik UI for Blazor provides comprehensive support for building forms.</p>

                <p>
                    For more information on using form items and templates refer to the article
                    on <a href="https://docs.telerik.com/blazor-ui/components/form/overview" target="_blank">
                        Blazor Form Items support by Telerik UI for Blazor
                    </a>.
                </p>
            </div>
        </GridLayoutItem>
    </GridLayoutItems>
</TelerikGridLayout>

<TelerikLoaderContainer Text="Submitting form"
                        LoaderPosition="@LoaderPosition.End"
                        Visible="IsSubmitting" />

<TelerikNotification @ref="@Notification"
                     VerticalPosition="NotificationVerticalPosition.Bottom"
                     AnimationType="AnimationType.SlideUp">
</TelerikNotification>

@code{
    Person person { get; set; }
    TelerikNotification Notification { get; set; }
    bool IsSubmitting = false;
    bool IsLargeDevice = true;

    protected override Task OnInitializedAsync()
    {
        GetDefaultPerson();

        return base.OnInitializedAsync();
    }

    async void HandleValidSubmit()
    {
        IsSubmitting = true;
        // implement actual data storage here
        await Task.Delay(2000); // simulate background thread

        Notification.Show(new NotificationModel()
            {
                Icon = FontIcon.Check,
                Text = "Application form submitted Successfully, we will get back to you",
                ThemeColor = "success",
                Closable = false,
                CloseAfter = 6000
            });

        //clear form
        GetDefaultPerson();
        IsSubmitting = false;
        StateHasChanged();
    }

    void GetDefaultPerson()
    {
        // in reality you may be pulling data from a service or authentication logic
        // not only for the form model, but also for the data sources below
        person = new Person()
        {
            StartDate = DateTime.Now.AddDays(7)
        };
    }

    IEnumerable<DropDownModel> genders = new List<DropDownModel>
    {
        new DropDownModel {Text = "female", Id = 1},
        new DropDownModel {Text = "male", Id = 2},
        new DropDownModel {Text = "other", Id = 3},
        new DropDownModel {Text = "I'd rather not say", Id = 4}
    };

    List<string> Teams = new List<string>
    {
        "Blazor", "Python", "Ruby", "Java", "JavaScript", "Assembler"
    };
}